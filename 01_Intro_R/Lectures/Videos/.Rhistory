hello
print("hungry")
12/3
rate<-10
rate<-0.05
term<-5l
term<-5L
princ<-15000
pmt_msg<-"Your monthly payment is"
class(pmt_msg)
class(pmt_msg)
class(pmt_msg)
nchar(pmt_msg)
# Other useful character functions
substr(pmt_msg)
paste(pmt_msg,mth_pmt,sep = " ")
# ******************************************************************************
# Slide#10: Dates Data Types
# ******************************************************************************
# The first payment date will be due on 5/10/2030
fst_pmt_dt<-as.Date)"2030-05-10"
# ******************************************************************************
# Slide#10: Dates Data Types
# ******************************************************************************
# The first payment date will be due on 5/10/2030
fst_pmt_dt<-as.Date)<-"2030-05-10"
# ******************************************************************************
# Slide#10: Dates Data Types
# ******************************************************************************
# The first payment date will be due on 5/10/2030
fst_pmt_dt<-as.Date("2030-05-10")
class(fst_pmt_dt)
# The actual value is number of days since 1/1/1970
as.numeric(fst_pmt_dt)
# The actual payment was made on 5/2/2030
#actual payment datetime
act_pmt_dtm<-as.POSIXct("2030-05-02 10:34:52")
class(act_pmt_dtm)
# The actual value is number of seconds since 1/1/1970
as.numeric(act_pmt_dtm)
pmt_made<-TRUE
# Logical data is used with relational operators
type(pmt_made)
# Logical data is used with relational operators
is.logical(pmt_made)
class(pmt_made)
typeof(pmt_made)
act_pmt<-250
act_pmt
install.packages("optiRum")
library(optiRum)
pmt_fuc <-  -PMT(rate/12,term*12,princ)
pmt_fuc
detach("package:optiRum")
library(optiRum)
remove.packages("optiRum")
load("C:/idsc4110/IDSC_4110/01_Intro_R/Lectures/Videos/Lect11_R_Basics_demo.r")
# ******************************************************************************
# Slide#3: Vectors in R
# ******************************************************************************
# Vectors are created with a c (combine) function
# Create vector of interest rates on 10 loans
# 0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, 0.065, 0.0775, 0.0575, 0.0575
rates <- c( 0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, 0.065, 0.0775, 0.0575, 0.0575)
rates
# Multiply vector by 100 to get rates as percentages
rates *100
# Add 1% to each of the 10 rates
rates+0.01
# Adding two vectors of the same size
rate_inc<-1:10
#modify the factor by dividing by 100
rate_inc<-rate_inc/100
rates+rate_inc
rates+rate_inc
rate_inc<-rate_inc/100
rates+rate_inc
# ******************************************************************************
# Slide#5: Vector operations - Careful when vectors are not of the same size
# ******************************************************************************
# Determine vector length
length(rates)
length(rates_rate_inc)
# Careful when vectors are not of the same length
rate_inc <- c(0, 0.01, 0.02)
length(rate_inc)
rates+rate_inc
rates+rate_inc
# ******************************************************************************
# Slide#6: Vector operations - Logical operators
# ******************************************************************************
# See which loans are under 7%
rates <0.07
rate_inc<-rap(1,10)
new_rates<-rates+rate_inc/100
new_rates>rates
#Summarize in one sentence
all(new_rates>rates)
# Confirm all the loans experienced rate increase
rate_inc<-rap(1,10)
new_rates<-rates+rate_inc/100
new_rates>rates
rate_inc<-rep(1,10)
new_rates<-rates+rate_inc/100
new_rates>rates
#Summarize in one sentence
all(new_rates>rates)
loantype <-c("Mortg", "Mortg", "Mortg", "Car", "Car", "Mortg", "Other", "Car", "Mortg", "Mortg")
loantype <-c("Mortg", "Mortg", "Mortg", "Car", "Car", "Mortg", "Other", "Car", "Mortg", "Mortg")
length(loantype)
nchar(loantype)
# ******************************************************************************
# Slide#8: Vector Elements - Access methods and naming
# ******************************************************************************
# Accessing first 5 elements
rates[3]
#Typicaly done by combine function
loantype[1:5]
lantype[c(1,5)]# It can get weird, accessing just mortgage loan rates
loantype[c(1,5)]
loantype
rates
# It can get weird, accessing just mortgage loan rates
### Can be substational
#Define Logical Factor
mortgType <-loadtype=="Mortg"
# It can get weird, accessing just mortgage loan rates
### Can be substational
#Define Logical Factor
mortgType <-loantype=="Mortg"
mortgType
loantype[mortgType]
#Get desired rates
rates[mortgType]
#Just get mortgs
loantype[mortgType]
#average function
#average of the 6 mortgs
mean(rates[mortgType])
rates
# Using one vector to name another
### Vector naming
### each of the 10 rates can be named with the type of the loan
nams(rates)<-loantype
# Using one vector to name another
### Vector naming
### each of the 10 rates can be named with the type of the loan
names(rates)<-loantype
rates
loantypeFactor
loantypeFactor<-as.factor(loantype)
loantypeFactor
# Each of the 3 factors is represented by a unique integer
as.numeric(loantypeFactor)
rates
# ******************************************************************************
# Slide#9: Factor Vectors
# ******************************************************************************
# Factor vectors are categorical variables using in analytics all the time
loantypeFactor<-as.factor(loantype)
loantypeFactor
# Each of the 3 factors is represented by a unique integer
as.numeric(loantypeFactor)
# ******************************************************************************
# Slide#10: Missing Data - NA or Not Available
# ******************************************************************************
# There are 2 types of missing data in R
# NA stands for Not Available and truly represents missing data
# This data may (or may not) become available later
# The NA value simply becomes the value used in lieu of missing information
# Let's assume the 7th loan of type Other has missing interest rate and categorization
# 0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, NA, 0.0775, 0.0575, 0.0575
rates<-c(0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, NA, 0.0775, 0.0575, 0.0575)
rates
is.na(rates)
any(rates)
loantype<-c("Mortg", "Mortg", "Mortg", "Car", "Car", "Mortg", NA, "Car", "Mortg", "Mortg")
loantype<-c("Mortg", "Mortg", "Mortg", "Car", "Car", "Mortg", NA, "Car", "Mortg", "Mortg")
loantype
any(is.na(loantype))
# ******************************************************************************
# Slide#11: Missing Data - NULL value
# ******************************************************************************
# On the other hand, NULL represents the absence of value
fv_ballon <-c(5000, NULL, 10000, 15000)
fv_ballon
is.null(fv_ballon)
library(magrittr)
detach("package:magrittr", unload = TRUE)
install.packages("magrittr")
# ******************************************************************************
# Slide#12: Using Pipes in R
# ******************************************************************************
# Pipes are a new way of calling functions in a more natural manner
# Install magrittr package first
library(magrittr)
# ******************************************************************************
# Slide#12: Using Pipes in R
# ******************************************************************************
# Pipes are a new way of calling functions in a more natural manner
# Install magrittr package first
#load
library(magrittr)
# ******************************************************************************
# Slide#12: Using Pipes in R
# ******************************************************************************
# Pipes are a new way of calling functions in a more natural manner
# Install magrittr package first
#load
library(magrittr)
# Traditional vs. piped function calls
### remove na from the calculation , because otherwise we will get NA as a mean
mean(rates,na.rm=TRUE)
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
na.rm=TRUE
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
### specify data source
### pipe that data soruce in to the function
rates %>% mean(na.rm=TRUE)
### specify data source
### pipe that data soruce in to the function
rates %>% mean(na.rm=TRUE)
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
detach("packageLmagrittr")
# Traditional vs. piped function calls
### remove na from the calculation , because otherwise we will get NA as a mean
mean(rates,na.rm=TRUE)
# ******************************************************************************
# Slide#10: Missing Data - NA or Not Available
# ******************************************************************************
# There are 2 types of missing data in R
# NA stands for Not Available and truly represents missing data
# This data may (or may not) become available later
# The NA value simply becomes the value used in lieu of missing information
# Let's assume the 7th loan of type Other has missing interest rate and categorization
# 0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, NA, 0.0775, 0.0575, 0.0575
rates<-c(0.07, 0.075, 0.07, 0.065, 0.077, 0.0625, NA, 0.0775, 0.0575, 0.0575)
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
### specify data source
### pipe that data soruce in to the function
rates %>% mean(na.rm=TRUE)
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
# Traditional vs. piped function calls
### remove na from the calculation , because otherwise we will get NA as a mean
mean(rates,na.rm=TRUE)
# Nesting of functions is simpler and more efficient
sum(is.na(rates))
rates %>% is.na %>% sum
detach("packageLmagrittr")
detach("packageLmagrittr")
detach("package:magrittr")
