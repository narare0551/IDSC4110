h_error_lm
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ylim(-5000, 8000) +
xlim(0, 30000) +
ggtitle("Linear Reg., Prediction Error vs Actual Price") +
labs(x = "Actual Price", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ggtitle("Linear Reg., Prediction Error vs Actual Price") +
labs(x = "Actual Price", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ggtitle("Linear Reg., Prediction Error vs true count of bike ride") +
labs(x = "True count of bike rides ", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bikeME_lin <- mean(bikelm_error)
bikeME_lin <- mean(bikelm_error)
bikeME_lin <- mean(bikelm_error)
#
bikeME_lin <- mean(bikelm_error)
#
bikeME_lin <- mean(bikelm_error)
bikeME_lin
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = test_set_lr$Price)
bikeME_lin <- mean(bikelm_error)
bikeME_lin
#Overall direction of the prediction
#Under_predicted
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
ME_models <- set_label(ME_models,"ME models")
ME_models
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
names(ME_models)<-c("K-NN","Regression","Linear Regression")
ME_models <- set_label(ME_models,"ME models")
ME_models
bikeKNN_RMSE <- RMSE(pred = bikeKNN_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
RMSE_models<-c(bikeKNN_RMSE,bikeTree_RMSE,bikelin_RMSE)
names(RMSE_models)<--c("K-NN","Regression","Linear Regression")
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
RMSE_models<-c(bikeKNN_RMSE,bikeTree_RMSE,bikelin_RMSE)
names(RMSE_models)<-c("K-NN","Regression","Linear Regression")
RMSE_models <-set_label(RMSE_models,"RMSE_models")
RMSE_models
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bikeknn_error <- bikeknnPred - biketest_set_stand$cnt_bike
#Visualize the prediction error
bikeprediction_error_knn <- ggplot(data= biketest_set_stand, aes(x = bikeknn_error)) +
geom_histogram(colour = "lightblue", fill = "blue") +
xlim (-5000, 5000) +
ylim (0, 50) +
ggtitle("KNN, Distribution of Prediction Error") +
labs(x = "Prediction Error")
bikeprediction_error_knn
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim(0,100)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
biketree_error <- biketreePred - biketest_set$cnt_bike
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
ylim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
ylim(0,50)+
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
ggplot(data = bikedf, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
ggtitle("Number of bike rides distribution") +
labs(x = "Number of bike rides")
#It is pretty much evenly distributed
bike_pred_knn
bike_pred_knn
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
xlim(-10000,10000)
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
xlim(-10000,10000)+
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bikeknn_error <- bikeknnPred - biketest_set_stand$cnt_bike
#Visualize the prediction error
bikeprediction_error_knn <- ggplot(data= biketest_set_stand, aes(x = bikeknn_error)) +
geom_histogram(colour = "lightblue", fill = "blue") +
xlim (-10000, 10000) +
ylim (0, 50) +
ggtitle("KNN, Distribution of Prediction Error") +
labs(x = "Prediction Error")
bikeprediction_error_knn
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim (-10000, 10000) +
ylim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim (-10000, 10000) +
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
xlim(-10000,10000)+
ylim(0,50)+
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
ME_models
RMSE_models
ME_models
RMSE_models
setwd("C:/idsc4110/IDSC_4110/02_Data_Struct")
# Display some and all column names
names(loans_df)
# Display some and all column names
names(loans_df)
# ******************************************************************************
# *** Introduction to R: Data Structures ***************************************
# ******************************************************************************
# ******************************************************************************
# Slide#4: Data Frames - Construction
# ******************************************************************************
# Create data frame of financial loans using interest rates and loan types
# as well as amounts borrowed, loan terms and monthly payment vectors
amount <- c(200000,150000,100000,25000,10000,200000,15000,25000,150000,475000)
intRate <- c(0.07,0.075,0.07,0.065,0.077,0.0625,0.065,0.0775,0.0575,0.0575)
loanTerm <- c(15,15,30,3,5,15,3,4,15,15)
loanType <- c('Mortg','Mortg','Mortg','Car','Car','Mortg','Other','Car','Mortg','Mortg')
mthPmt <- c(1787.23,1381.88,661.44,762.1,200.05,1705.96,457.26,603.5,1239.68,3925.64)
# Create a data frame using data.frame function on the provided vectors
loans_df <-data.frame(amount,intRate,loanTerm, loanType,mthPmt)
loans_df
# Create a vector of column names
loan_col<-c("Amount","Rate","Term","Type","Payment")
names(loans_df)<-loan_col
# ******************************************************************************
# Slide#5: Data Frames - Basic Attributes
# ******************************************************************************
# Determine the size of the data frame
nrow(loans_df)
ncol(loans_df)
### Dimension
dim(loans_df)
# Get the structure of the data frame
### Show the type of the column
str(loans_df)
# Display some and all column names
names(loans_df)
# Show only the top and bottom portions of a large data frame
# Print the basic summaries of the data in a data frame
# ******************************************************************************
# Slide#6: Data Frames - Rows and Columns
# ******************************************************************************
# Accessing a single column of a data frame
# Notice difference in display, not obvious why
# Accessing consecutive rows and a single column
# Accessing nonconsecutive rows and all columns
# Experiment with removing the comma
# Accessing columns using their names
# Experiment with removing the comma
# ******************************************************************************
# Slide#7: Data Frames - Factor Columns
# ******************************************************************************
# Working with factor columns in a data frame
# The type of loan column is not a factor vector
# data.frame column
# Double-brackets more used with lists
# character vector
# Parameter drop=FALSE assures data frame type
# Recreating the data frame with loan type as a factor column
# ******************************************************************************
# Slide#8: Data Frames - Indicator Variables
# ******************************************************************************
# Creating indicator (dummy) variables based on different factor levels
# Display some and all column names
names(loans_df)
# Show only the top and bottom portions of a large data frame
names(loanns_df)[5]
# Show only the top and bottom portions of a large data frame
names(loans_df)[5]
# Show only the top and bottom portions of a large data frame
names(loans_df)[5]
names(loans_df[5])
names(loans_df)[c(2,4)]
# Show only the top and bottom portions of a large data frame
head(loans_df)
tail(loans_df,n=1)
# Print the basic summaries of the data in a data frame
summary(loans_df)
# ******************************************************************************
# Slide#6: Data Frames - Rows and Columns
# ******************************************************************************
# Accessing a single column of a data frame
loans_df$Type
# Notice difference in display, not obvious why
loans_df[2]
# Notice difference in display, not obvious why
loans_df
# Notice difference in display, not obvious why
loans_df
View(loans_df)
View(loans_df)
loans_df[,1]
# ******************************************************************************
# *** Problem 01: Nine States Population Density
# ******************************************************************************
# Various data vectors for the top 9 states
top_states <- c('New York','California','Illinois','Texas','District of Columbia',
'Pennsylvania','Florida','Massachusetts','Minnesota')
st_abbr <- c('NY','CA','IL','TX','DC','PA','FL','MA','MN')
# Land area in square miles
land_area <-c(47214,155959,55584,261797,68,44817,53927,7840,79610)
# 2010 census population
pop_2010 <-c(19378102,37253956,12830632,25145561,601723,
12702379,18801310,6547629,5303925)
# a) ***************************************************************************
# Calculate and display the population density
pop_density <-
names(pop_density) <-
# b) ***************************************************************************
# Calculate and display the percent for each state out of total area
tot_area <-
pct_area <-
names(pct_area) <-
# ******************************************************************************
# *** Problem 02: Nine States Population Change
# ******************************************************************************
# 2020 census population
pop_2020<- c(20201249,39538223,12821508,29145505,689545,
13002700,21538187,7029917,5706494)
# a) ***************************************************************************
# Creating the top sports states population data frame, naming
# columns and displaying the data frame
top_states_pop_df <-
top_names <- c("Name", "Abbr", "Area", "Pop2010", "Pop2020")
names(top_states_pop_df) <-
top_states_pop_df
# b) ***************************************************************************
# Add the population percentage change to the data frame
top_states_pop_df$PopPctChg <-
top_states_pop_df
# a) ***************************************************************************
# Calculate and display the population density
pop_density <- pop_2010/land_area
# b) ***************************************************************************
# Calculate and display the percent for each state out of total area
tot_area <-
pct_area <-
names(pct_area) <-
# ******************************************************************************
# *** Problem 02: Nine States Population Change
# ******************************************************************************
# 2020 census population
pop_2020<- c(20201249,39538223,12821508,29145505,689545,
13002700,21538187,7029917,5706494)
names(pop_density) <- st_abbr
pop_density
# b) ***************************************************************************
# Calculate and display the percent for each state out of total area
tot_area <-
sum(land_area)
# b) ***************************************************************************
# Calculate and display the percent for each state out of total area
tot_area <- sum(land_area)
pct_area <- land_area/tot_area*100
pct_area
paste(pmt_msg, round(pct_area,2),%, sep = "")
students<-c("john","steve","mary")
students<-c("John","Steve","Mary")
major<-c("FIN","ACCT","FIN")
gpa <-c(3.5,3.7,NA)
credits <-c(9,13,10)
df<-data.frame(students,major,gpa,credits)
View(df)
View(df)
df
str(df)
df[2,c[1,2,4]]
df[2,c(1,2,4)]
df[2,c(1,3,4)]
df[2,-2]
df[-c(1,3),-2]
df
df[2]
df[,2]
class(df[,2])
class(df[2])
df$major
df$major="FIN"
print(,df$major="FIN")
df$major=="FIN"
# 2. Run dim, head, tail, str and summary functions
df[df$major=="FIN",]
View(df)
View(df)
students<-c("John","Steve","Mary")
major<-c("FIN","ACCT","FIN")
#NA : cannot find a value
gpa <-c(3.5,3.7,NA)
credits <-c(9,13,10)
students<-c("John","Steve","Mary")
major<-c("FIN","ACCT","FIN")
#NA : cannot find a value
gpa <-c(3.5,3.7,NA)
credits <-c(9,13,10)
View(df)
View(df)
df
students<-c("John","Steve","Mary")
major<-c("FIN","ACCT","FIN")
#NA : cannot find a value
gpa <-c(3.5,3.7,NA)
credits <-c(9,13,10
df<-data.frame(students,major,gpa,credits)
df<-data.frame(students,major,gpa,credits)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
region <- c("MDW","MDW","MDW","NE","MDW","MDW","MDW",
"MDW","MDW","MDW","NE","MDW","NE","MDW")
wn_rank <- c("High","Mod","Mod","Mod","High","Mod","Mod",
"Low","Top10","Mod","Mod","Mod","Mod","High")
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
enroll <- c(48216, 43710, 32166, 40521, 46002, 50019, 51848,
26079, 22008, 59837, 47119, 42699, 49577,42977)
sat <- c(1420, 1245, 1255, 1375, 1415, 1210, 1375,
1240, 1490, 1355, 1250, 1265, 1295, 1365)
act <- c(29, 28, 25.5, 31, 31.5, 25.5, 28.5, 25.5,
33, 29, 27.5, 28, 27.5, 29)
accept <- c(0.62, 0.77, 0.83, 0.47, 0.23, 0.78, 0.52,
0.8, 0.08, 0.52, 0.56, 0.58, 0.6, 0.52)
hs_gpa <- c(3.79, 3.62, 3.61, 3.75, 3.82, 3.62, 3.75,
3.57,3.92, 3.76, 3.59, 3.7, 3.75, 3.84)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
region <- c("MDW","MDW","MDW","NE","MDW","MDW","MDW",
"MDW","MDW","MDW","NE","MDW","NE","MDW")
wn_rank <- c("High","Mod","Mod","Mod","High","Mod","Mod",
"Low","Top10","Mod","Mod","Mod","Mod","High")
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
enroll <- c(48216, 43710, 32166, 40521, 46002, 50019, 51848,
26079, 22008, 59837, 47119, 42699, 49577,42977)
sat <- c(1420, 1245, 1255, 1375, 1415, 1210, 1375,
1240, 1490, 1355, 1250, 1265, 1295, 1365)
act <- c(29, 28, 25.5, 31, 31.5, 25.5, 28.5, 25.5,
33, 29, 27.5, 28, 27.5, 29)
accept <- c(0.62, 0.77, 0.83, 0.47, 0.23, 0.78, 0.52,
0.8, 0.08, 0.52, 0.56, 0.58, 0.6, 0.52)
hs_gpa <- c(3.79, 3.62, 3.61, 3.75, 3.82, 3.62, 3.75,
3.57,3.92, 3.76, 3.59, 3.7, 3.75, 3.84)
big_ten_df <- data.frame(school,region,wn_rank,grad_rate,
enroll,sat,act,accept,hs_gpa)
View(big_ten_df)
View(big_ten_df)
bt_df_names <- c("School", "Region","Rank", "GR_Rate",
"Enroll","SAT","ACT","Accept","HS_GPA")
names(big_ten_df) <- bt_df_names
names(big_ten_df) <- bt_df_names
big_ten_df
big_ten_df
bt_df_names <- c("School", "Region","Rank", "GR_Rate",
"Enroll","SAT","ACT","Accept","HS_GPA")
names(big_ten_df) <- bt_df_names
dim(big_ten_df)
str(big_ten_df)
head(big_ten_df)
head(big_ten_df,n=4)
tail(big_ten_df)
#summarize
#with generic statistics
summary(big_ten_df)
summary(big_ten_df)
View(big_ten_df)
View(big_ten_df)
big_ten_df[14,c(1,4,7)]
big_ten_df[14,c("School","GR_Rate","ACT")]
View(big_ten_df)
View(big_ten_df)
big_ten_df$School=="Wisconsin"
big_ten_df$School=="Wisconsin"
l column displayed many different ways
# 4. Us
big_ten_df[big_ten_df$School=="Wisconsin" | "Minnesota",c(1,4,7,)]
big_ten_df[big_ten_df$School=="Wisconsin",c(1,4,7,)]
big_ten_df[big_ten_df$School=="Wisconsin",c(1,4,7)]
big_ten_df[big_ten_df$School=="Wisconsin" | "Minnesota",c(1,4,7,)]
big_ten_df[big_ten_df$School=="Wisconsin" | "Minnesota",c(1,4,7)]
big_ten_df[big_ten_df$School=="Wisconsin" |  big_ten_df$School=="Minnesota",c(1,4,7)]
WI_MN_gr_rate_act<-big_ten_df$School=="Wisconsin" |  big_ten_df$School=="Minnesota"
#Assign the condition into the variable
#Wisconsin and minnesota graduated act rate
WI_MN_gr_rate_act<-big_ten_df$School=="Wisconsin" |  big_ten_df$School=="Minnesota"
big_ten_df[WI_MN_gr_rate_act,c(1,4,7)]
# School column displayed many different ways
# 4. Using numerical column reference
big_ten_df[1]
big_ten_df[1]     # Data frame
View(big_ten_df)
,1]     # Data frame
big_ten_df[,1]     # Data frame
class(big_ten_df[,1])
class(big_ten_df[1])
class(big_ten_df[,1])
class(big_ten_df["School"])                        # Character vector
big_ten_df["School"]                      # Data frame
big_ten_df[,"School"]                       # Character vector
View(big_ten_df)
class(big_ten_df[,"School"] )                        # Character vector
class(big_ten_d$School )
class(big_ten_df$School )
big_ten_df
big_ten_df$School
sch
sch<-as.data.frame(big_ten_df$School)
big_ten_df[c(1,5,8,9)]
#7 Add a column to the big_ten_df data frame, named quality, defined
# as the average of normalized SAT & ACT scores, rounded to 2 decimals.
### Using other code editors
big_ten_df$Quality <-round(big_ten_df$SAT/1600,2)
big_ten_df
#7 Add a column to the big_ten_df data frame, named quality, defined
# as the average of normalized SAT & ACT scores, rounded to 2 decimals.
### Using other code editors
big_ten_df$Quality <-round((big_ten_df$SAT/1600+big_ten_df$ACT/36)/2,2)
big_ten_df
