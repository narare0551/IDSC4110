bikeknnME <- mean(bikeknn_error)
#Underpredicting but not that bad
bikeknnME
#RMSE
#Compare with MAE
#Root mean squared Error
bikeknnRMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_stand$cnt_bike)
bikeknnRMSE
bikertree <- train(cnt_bike~., biketrain_set, method = "rpart") # use rpart
bikertree
rpart.plot(bikertree$finalModel, digits=-3)
bikelin_pred <- predict(bikelin_reg, newdata = biketest_set_lr)
bikefit <- bikelin_reg$finalModel
biketrain_set_lr <- select(biketrain_set, 1:3, 5:7) # omit the 4th column : Temp
biketest_set_lr <- select(biketest_set, 1:3, 5:7) # omit the 4th column : Temp
bikelin_reg <- train(cnt_bike~., biketrain_set_lr, method = "lm")
bikelin_reg
bikefit <- bikelin_reg$finalModel
options(scipen = 999) # This sets an option for your entire R session. Setting scipen to a large number to avoid scientific notation
summary(fit)
bikefit <- bikelin_reg$finalModel
options(scipen = 999) # This sets an option for your entire R session. Setting scipen to a large number to avoid scientific notation
summary(bikefit)
bikelin_pred <- predict(bikelin_reg, newdata = biketest_set_lr)
bike_h_pred_lm <- ggplot(data = biketest_set_lr, aes(x = bikelin_pred)) +
geom_histogram(colour = "seagreen", fill = "darkgreen") +
ggtitle("Linear Reg., Distribution of Predicted bike rides ") +
labs(x = "Predicted Bike Rides")
biketrue_count
grid.arrange(biketrue_count, bike_h_pred_lm, nrow = 1)
bikelm_error <- bikelin_pred - biketest_set_lr$cnt_bike
bike_h_error_knn <- ggplot(data= biketest_set_stand, aes(x = bikeknn_error)) +
geom_histogram(colour = "lightblue", fill = "blue") +
ggtitle("KNN, Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_knn
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ylim(-5000, 8000) +
xlim(0, 30000) +
ggtitle("Linear Reg., Prediction Error vs Actual Price") +
labs(x = "Actual Price", y = "Linear Reg. Prediction Error")
bike_p_error_lm
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
h_error_lm
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ylim(-5000, 8000) +
xlim(0, 30000) +
ggtitle("Linear Reg., Prediction Error vs Actual Price") +
labs(x = "Actual Price", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ggtitle("Linear Reg., Prediction Error vs Actual Price") +
labs(x = "Actual Price", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bike_p_error_lm <- ggplot(data = biketest_set_lr, aes(x = cnt_bike, y = bikelm_error)) +
geom_point(size = 2, color = "seagreen") +
ggtitle("Linear Reg., Prediction Error vs true count of bike ride") +
labs(x = "True count of bike rides ", y = "Linear Reg. Prediction Error")
bike_p_error_lm
grid.arrange(bike_p_error_lm, bike_h_error_lm, nrow = 1)
bikeME_lin <- mean(bikelm_error)
bikeME_lin <- mean(bikelm_error)
bikeME_lin <- mean(bikelm_error)
#
bikeME_lin <- mean(bikelm_error)
#
bikeME_lin <- mean(bikelm_error)
bikeME_lin
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = test_set_lr$Price)
bikeME_lin <- mean(bikelm_error)
bikeME_lin
#Overall direction of the prediction
#Under_predicted
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$Price)
bikelin_RMSE
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
ME_models <- set_label(ME_models,"ME models")
ME_models
bikeME_KNN <- mean (bikeknn_error)
bikeME_tree <- mean (biketree_error)
bikeME_lin <- mean(bikelm_error)
ME_models <-c(bikeME_KNN,bikeME_tree,bikeME_lin)
names(ME_models)<-c("K-NN","Regression","Linear Regression")
ME_models <- set_label(ME_models,"ME models")
ME_models
bikeKNN_RMSE <- RMSE(pred = bikeKNN_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
RMSE_models<-c(bikeKNN_RMSE,bikeTree_RMSE,bikelin_RMSE)
names(RMSE_models)<--c("K-NN","Regression","Linear Regression")
bikeKNN_RMSE <- RMSE(pred = bikeknnPred, obs = biketest_set_lr$cnt_bike)
bikeTree_RMSE <-RMSE(pred=biketreePred, obs = biketest_set_lr$cnt_bike)
bikelin_RMSE <- RMSE(pred = bikelin_pred, obs = biketest_set_lr$cnt_bike)
RMSE_models<-c(bikeKNN_RMSE,bikeTree_RMSE,bikelin_RMSE)
names(RMSE_models)<-c("K-NN","Regression","Linear Regression")
RMSE_models <-set_label(RMSE_models,"RMSE_models")
RMSE_models
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bikeknn_error <- bikeknnPred - biketest_set_stand$cnt_bike
#Visualize the prediction error
bikeprediction_error_knn <- ggplot(data= biketest_set_stand, aes(x = bikeknn_error)) +
geom_histogram(colour = "lightblue", fill = "blue") +
xlim (-5000, 5000) +
ylim (0, 50) +
ggtitle("KNN, Distribution of Prediction Error") +
labs(x = "Prediction Error")
bikeprediction_error_knn
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim(0,100)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
biketree_error <- biketreePred - biketest_set$cnt_bike
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
ylim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
ylim(0,50)+
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
ggplot(data = bikedf, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
ggtitle("Number of bike rides distribution") +
labs(x = "Number of bike rides")
#It is pretty much evenly distributed
bike_pred_knn
bike_pred_knn
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
xlim(-10000,10000)
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
#ggplot contain actual price
#Price distribution
biketrue_count <- ggplot(data=biketest_set_stand, aes(x = cnt_bike)) +
geom_histogram(colour = "grey", fill = "black") +
xlim(-10000,10000)+
ylim (0,50) +
ggtitle("True count of bike rides") +
labs(x = "Bike Counts")
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bikeknn_error <- bikeknnPred - biketest_set_stand$cnt_bike
#Visualize the prediction error
bikeprediction_error_knn <- ggplot(data= biketest_set_stand, aes(x = bikeknn_error)) +
geom_histogram(colour = "lightblue", fill = "blue") +
xlim (-10000, 10000) +
ylim (0, 50) +
ggtitle("KNN, Distribution of Prediction Error") +
labs(x = "Prediction Error")
bikeprediction_error_knn
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim (-10000, 10000) +
ylim(0,50)+
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
h_bike_pred_tree <- ggplot(data= biketest_set, aes(x = biketree_error)) +
geom_histogram(colour = "red", fill = "darkred") +
xlim (-10000, 10000) +
ggtitle("Tree, Distribution of Prediction Error of count of bike rides") +
labs(x = "Prediction Error ")
h_bike_pred_tree
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
bike_h_error_lm <- ggplot(data = biketest_set_lr, aes(x = bikelm_error)) +
geom_histogram(colour = "darkgreen", fill = "seagreen") +
xlim(-10000,10000)+
ylim(0,50)+
ggtitle("Linear Reg., Distribution of Prediction Error") +
labs(x = "Prediction Error")
bike_h_error_lm
grid.arrange(biketrue_count,bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
grid.arrange(bikeprediction_error_knn, h_bike_pred_tree,bike_h_error_lm, nrow = 2)
ME_models
RMSE_models
ME_models
RMSE_models
load("C:/idsc4110/IDSC_4110/02_Data_Struct/Assign/Assign1_Intro_R/Assign1_Intro_R.Rproj")
setwd("C:/idsc4110/IDSC_4110")
# ******************************************************************************
# *** Problem 01: Nine States Population Density
# ******************************************************************************
# Various data vectors for the top 9 states
top_states <- c('New York','California','Illinois','Texas','District of Columbia',
'Pennsylvania','Florida','Massachusetts','Minnesota')
st_abbr <- c('NY','CA','IL','TX','DC','PA','FL','MA','MN')
# Land area in square miles
land_area <-c(47214,155959,55584,261797,68,44817,53927,7840,79610)
# 2010 census population
pop_2010 <-c(19378102,37253956,12830632,25145561,601723,
12702379,18801310,6547629,5303925)
# a) ***************************************************************************
# Calculate and display the population density
###Density is population divided by area
pop_density <- pop_2010/land_area
names(pop_density) <- st_abbr
pop_density
num_states <- length(st_abbr)
num_states
pct_symbol <- rep("%",num_states)
paste(pop_density*100, pct_symbol, sep="")
paste(pop_density*100, pct_symbol, sep="")
population_density <- pop_2010/land_area
names(population_density) <- st_abbr
population_density
num_states
pct_symbol
paste(population_density*100, pct_symbol, sep="")
names(population_density) <- st_abbr
names(population_density) <- st_abbr
# ******************************************************************************
# *** Introduction to R: Vectors ***********************************************
# ******************************************************************************
# ******************************************************************************
# *** Exercise 01: Big Ten Schools
# https://www.univstats.com/comparison/big-ten-conference/graduation-rate/
# Create Big Ten graduation rate and school vectors based on the data provided
# below. Display the rates, school names, number of schools and rates as
# character percentages. Use rep and paste functions. For example, Minnesota
# would look like "80%".
# Illinois  Indiana   Iowa  Maryland  Michigan  Michigan State	Minnesota
#   0.85	    0.77	  0.74	  0.85	    0.92	    0.80	          0.80
# Nebraska	Northwestern	Ohio State	Penn State	Purdue	Rutgers	Wisconsin
#   0.68	    0.94	        0.83	      0.85	      0.78	  0.80	  0.87
# ******************************************************************************
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
names(grad_rate) <- school
grad_rate
grad_rate<-unname(grad_rate)
# 1. Find the number of schools and create a vector of repetitive % symbols
num_sch <- length(school)
pct_sym <- rep("%",num_sch)
paste(grad_rate*100, pct_sym, sep="")
# 1. Find the number of schools and create a vector of repetitive % symbols
num_sch <- length(school)
# ******************************************************************************
# *** Introduction to R: Vectors ***********************************************
# ******************************************************************************
# ******************************************************************************
# *** Exercise 01: Big Ten Schools
# https://www.univstats.com/comparison/big-ten-conference/graduation-rate/
# Create Big Ten graduation rate and school vectors based on the data provided
# below. Display the rates, school names, number of schools and rates as
# character percentages. Use rep and paste functions. For example, Minnesota
# would look like "80%".
# Illinois  Indiana   Iowa  Maryland  Michigan  Michigan State	Minnesota
#   0.85	    0.77	  0.74	  0.85	    0.92	    0.80	          0.80
# Nebraska	Northwestern	Ohio State	Penn State	Purdue	Rutgers	Wisconsin
#   0.68	    0.94	        0.83	      0.85	      0.78	  0.80	  0.87
# ******************************************************************************
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
names(grad_rate) <- school
grad_rate
# 1. Find the number of schools and create a vector of repetitive % symbols
num_sch <- length(school)
pct_sym <- rep("%",num_sch)
paste(grad_rate*100, pct_sym, sep="")
grad_rate
paste(grad_rate*100, pct_sym, sep="")
tot_area=sum(land_area)
tot_area
per_state <- land_area/tot_area
per_state
tot_area=sum(land_area)
tot_area
per_state <- round(land_area/tot_area,2)
per_state
pct_symbol <- rep("%",num_states)
pct_symbol
paste(population_density*100, pct_symbol, sep="")
names(population_density) <- st_abbr
population_density
paste(population_density*100, pct_symbol, sep="")
paste(population_density*100, per_state, sep="")
paste(per_state*100, pct_symbol, sep="")
paste(per_state*100, pct_symbol, sep="")
names(paste(per_state*100, pct_symbol, sep=""))<-st_abbr
names(population_density) <- st_abbr
population_density
names(paste(per_state*100, pct_symbol, sep=""))<-st_abbr
names(paste(per_state*100, pct_symbol, sep=""))<-st_abbr
paste(per_state*100, pct_symbol, sep="")
names(test) <- school
tot_area=sum(land_area)
tot_area
per_state <- round(land_area/tot_area,2)
per_state
num_states
paste(per_state*100, pct_symbol, sep="")
# ******************************************************************************
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
names(grad_rate) <- school
grad_rate
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
names(grad_rate) <- school
grad_rate
# 1. Find the number of schools and create a vector of repetitive % symbols
num_sch <- length(school)
pct_sym <- rep("%",num_sch)
paste(grad_rate*100, pct_sym, sep="")
# ******************************************************************************
# *** Introduction to R: Vectors ***********************************************
# ******************************************************************************
# ******************************************************************************
# *** Exercise 01: Big Ten Schools
# https://www.univstats.com/comparison/big-ten-conference/graduation-rate/
# Create Big Ten graduation rate and school vectors based on the data provided
# below. Display the rates, school names, number of schools and rates as
# character percentages. Use rep and paste functions. For example, Minnesota
# would look like "80%".
# Illinois  Indiana   Iowa  Maryland  Michigan  Michigan State	Minnesota
#   0.85	    0.77	  0.74	  0.85	    0.92	    0.80	          0.80
# Nebraska	Northwestern	Ohio State	Penn State	Purdue	Rutgers	Wisconsin
#   0.68	    0.94	        0.83	      0.85	      0.78	  0.80	  0.87
# ******************************************************************************
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
names(grad_rate) <- school
grad_rate
# 1. Find the number of schools and create a vector of repetitive % symbols
num_sch <- length(school)
pct_sym <- rep("%",num_sch)
paste(grad_rate*100, pct_sym, sep="")
# ******************************************************************************
# *** Exercise 02: Big Ten SAT & ACT
# https://www.thoughtco.com/sat-scores-for-admission-to-the-big-ten-788620
# https://www.thoughtco.com/act-scores-for-big-ten-admission-788793
# Create Big Ten SAT and ACT vectors using the data provided below. Use the
# data to create and display a combined testing indicator of on a 100-scale
# in descending order and then display schools the same way.
# Note that Rutgers does not have ACT score, so you need to be careful on
# how you decide to deal with that issue.
# Illinois  Indiana   Iowa  Maryland  Michigan  Michigan State	Minnesota
#   1420	    1245	  1255	  1375	    1415	      1210	        1375
#   29	      28	    25.5	  31	      31.5	      25.5	        28.5
# Nebraska	Northwestern	Ohio State	Penn State	Purdue	Rutgers	Wisconsin
#   1240	    1490	        1355	      1250	      1265	  1295	  1365
#   25.5	    33	          29	        27.5	      28	      	    29
# ******************************************************************************
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
sat <- c(1420, 1245, 1255, 1375, 1415, 1210, 1375,
1240, 1490, 1355, 1250, 1265, 1295, 1365)
# I decided to enter 0 for Rutgers ACT score
act <- c(29, 28, 25.5, 31, 31.5, 25.5, 28.5, 25.5, 33, 29, 27.5, 28, 0, 29)
# Then use a multiplier that will double emphasize Rutgers SAT score
mult <- c(rep(1,12),2,1)
mult
# 2. Each test is normalized/scaled using its maximum and then average between
# the two tests is calculated and rounded for each school. The multiplier
# is used to essentially double Rutger's SAT score.
#Adjust to the fact that Rutger's not have ACT score
test <- round((sat/1600 + act/36)/2,2) * mult
names(test) <- school
test
round(act/36,2)
# 3. The sort function sorts the schools descending on their combined test score
test_sorted <- sort(test,decreasing = TRUE)
test_sorted
### 4. The order function returns the original position of each vector element
### in the newly ordered list. The positions can then be used to access elements
### in the desired order.
test_indx <-order(-test)
test[test_indx]
# ******************************************************************************
# *** Exercise 03: Big Ten Low and High Graduation Rates
# Determine if any of the schools have graduation rates under 80% or over 90%?
# Find out how many and display both the graduation rates and schools that fit
# this criteria. Use the proper missing value NA for Rutgers ACT instead of 0.
# ******************************************************************************
grad_rate <- c(0.85, 0.77, 0.74, 0.85, 0.92, 0.80, 0.80,
0.68, 0.94, 0.83, 0.85, 0.78, 0.80, 0.87)
school <- c("Illinois","Indiana","Iowa","Maryland","Michigan","Michigan State",
"Minnesota","Nebraska","Northwestern","Ohio State","Penn State",
"Purdue","Rutgers","Wisconsin")
### 5. Create the under80_ovr90 logical vector using graduation rate criteria
undr80_ovr90 <- grad_rate<0.8 | grad_rate>0.9
sum(undr80_ovr90)
any(undr80_ovr90)
paste("Num grad rate over 90% or under 80%: ", sum(undr80_ovr90))
# 6. List of schools with under 80 or over 90 graduation rates
sch_undr80_ovr90 <- school[undr80_ovr90]
sch_undr80_ovr90
# Graduation rates for those schools
gr_undr80_ovr90 <- grad_rate[undr80_ovr90 == TRUE]
names(gr_undr80_ovr90) <- sch_undr80_ovr90
gr_undr80_ovr90
# 7. ACT scores without Rutgers
act <- c(29, 28, 25.5, 31, 31.5, 25.5, 28.5, 25.5, 33, 29, 27.5, 28, NA, 29)
# Approximate equivalent ACT score for SAT of 1295 is 27.5
act[13] <- 27.5
mean(act)
mean(act,na.rm=TRUE)
grad_rate_pct<-paste(grad_rate*100, pct_sym, sep="")
per_state_percnt<-paste(per_state*100, pct_symbol, sep="")
names(per_state_percnt)<-pop_2010
names(per_state_percnt)<-st_abbr
per_state_percnt
# ******************************************************************************
# *** Problem 01: Nine States Population Density
# ******************************************************************************
# Various data vectors for the top 9 states
top_states <- c('New York','California','Illinois','Texas','District of Columbia',
'Pennsylvania','Florida','Massachusetts','Minnesota')
st_abbr <- c('NY','CA','IL','TX','DC','PA','FL','MA','MN')
# Land area in square miles
land_area <-c(47214,155959,55584,261797,68,44817,53927,7840,79610)
# 2010 census population
pop_2010 <-c(19378102,37253956,12830632,25145561,601723,
12702379,18801310,6547629,5303925)
# a) ***************************************************************************
# Calculate and display the population density
###Density is population divided by area
population_density <- pop_2010/land_area
#Name each density with the state abbreviation
names(population_density) <- st_abbr
population_density
# b) ***************************************************************************
# Calculate and display the percent for each state out of total area
tot_area=sum(land_area)
per_state <- round(land_area/tot_area,2)
num_states<-length(per_state)
pct_symbol <- rep("%",num_states)
pct_symbol
per_state_percnt<-paste(per_state*100, pct_symbol, sep="")
names(per_state_percnt)<-st_abbr
per_state_percnt
